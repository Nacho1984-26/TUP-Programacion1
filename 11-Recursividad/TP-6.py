'''
1- Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa 
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros 
entre 1 y el n√∫mero que indique el usuario 
'''

print("Ejercicio 1\n")

# Se crea la funci√≥n recursiva que calcula el factorial de un n√∫mero.
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

# Se solicita un n√∫mero al usuario  el cual funionar√° como rango.
num = int(input("Ingresa un n√∫mero entero: "))

# Se crea el bucle que ir√° entregando los factoriales desde 1 hasta el n√∫mero ingresado por el usuario.
for i in range(1, num+1):
    print(f"El factorial de {i} es: {factorial(i)}") # Se imprimen los factoriales.


'''
2- Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n 
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique. 
'''

print("Ejercicio 2\n")

# Se solicita la posici√≥n al usuario hasta donde quiere que se ejecute la serie de Fibonacci
n = int(input("Ingrese hasta que posici√≥n de la serie Fibonacci quiere ver: "))

# Se crea la funci√≥n de Fibonacci aplicando su m√©todo
def fibonacci(n): 
    if n == 0: 
        return 0 
    elif n == 1: 
        return 1 
    else: 
        return fibonacci(n - 1) + fibonacci(n - 2)

# Se crea un bucle for para imprimir la sucesi√≥n de Fibonacci desde el comienzo hasta la posici√≥n indicada por el usuario.
for i in range(n + 1):
    print(fibonacci(i)) # Se imprime el valor de cada posici√≥n hasta llegar la posici√≥n requerida.



'''
3- Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, 
utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general. 
'''

print("Ejercicio 3\n")

def potencia_recursiva(base, exponente):
    # Caso base: cualquier n√∫mero elevado a 0 es 1
    if exponente == 0:
        return 1
    # Se multiplica la base por el resultado de la potencia con un exponente reducido
    return base * potencia_recursiva(base, exponente - 1)

# Prueba de la funci√≥n con un algoritmo general
print("Ingrese el n√∫mero del cu√°l quiere saber su potencia:")
base = int(input("Ingresa la base: "))
exponente = int(input("Ingresa el exponente: "))

resultado = potencia_recursiva(base, exponente)
print(f"{base}^{exponente} = {resultado}")



'''
4- Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal 
y devuelva su representaci√≥n en binario como una cadena de texto. 
'''

print("\nEjercicio 4\n")

binario = [] # Creamos la lista "binario" que almacenar√° cada d√≠gito binario

# Funci√≥n que transforma decimal a binario
def binario_recursivo(nume):
    if nume == 0:
        return
    else:
        binario_recursivo(nume // 2)  # Llamamos recursivamente antes de agregar el residuo
        binario.append(nume % 2)  # Agregamos el bit correspondiente

# Solicitamos el n√∫mero que queremos convertir a binario
nume = int(input("Ingresa el n√∫mero entero positivo que quieras transformar a binario: "))
binario_recursivo(nume) # Llamado de la fuci√≥n

# Convertimos la lista a una cadena e imprimimos el resultado
#print(f"El n√∫mero {n} en decimal es:", "".join(map(str, binario))" en binario.")  

print("".join(map(str, binario)))

'''
5- Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de 
texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es. 
Requisitos: 
La soluci√≥n debe ser recursiva. 
No se debe usar [::-1] ni la funci√≥n reversed(). 
'''

print("\nEjercicio 5\n")

def es_palindromo(palabra):
    # Caso base: Si la palabra tiene 0 o 1 caracteres, es un pal√≠ndromo
    if len(palabra) <= 1:
        return True
    # Verificamos si el primer y √∫ltimo car√°cter son iguales
    if palabra[0] != palabra[-1]:
        return False
    # Llamamos recursivamente con la palabra sin el primer y √∫ltimo car√°cter
    return es_palindromo(palabra[1:-1])

# Ejemplo de uso
palabra = input("Ingresa una palabra sin espacios ni tildes, el programa te dir√° si es pal√≠ndromo o no: ")
print(es_palindromo(palabra))



'''
6- Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un 
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos. 
Restricciones: 
No se puede convertir el n√∫mero a string. 
Us√° operaciones matem√°ticas (%, //) y recursi√≥n. 
Ejemplos: 
suma_digitos(1234)   ‚Üí 10  (1 + 2 + 3 + 4) 
suma_digitos(9)      ‚Üí 9 
suma_digitos(305)    ‚Üí 8   (3 + 0 + 5)
'''

print("Ejercicio 6\n")

def suma_digitos(n):
    if n < 10:   # Caso base (si el numero es menor a 10 significa que es s√≥lo un d√≠gito)
        return n
    else:
        # Se extrae el √∫ltim d√≠gito y se suma con el anterior mediante la recursi√≥n
        return (n % 10) + suma_digitos(n // 10) 

n = int(input("Ingrese el n√∫mero del cu√°l quiere obtener la suma de sus d√≠gitos: "))
print(f"La suma de los d√≠gitos de {n} nos da como resultado: {suma_digitos(n)}.")



'''
7-  Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n 
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al 
√∫ltimo nivel con un solo bloque. 
 
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el 
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la 
pir√°mide. 
Ejemplos: 
contar_bloques(1)   ‚Üí 1         (1) 
contar_bloques(2)   ‚Üí 3         (2 + 1) 
contar_bloques(4)   ‚Üí 10        (4 + 3 + 2 + 1)
'''

print("\nEjercicio 7\n")

def contar_bloques(num):
    if num < 1: # Condici√≥n base: no puede haber menos de un bloque
        return num
    else:
         # Se suma recursivamente la cantidad inicial mas la cantidad inicial (actualizada) menos 1
         return num + contar_bloques(num - 1) 

# Se solicita el valor inicial para la prueba
num = int(input("Ingrese la cantidad de bloques del nivel m√°s bajo: "))
print(f"En base a los {num} bloques iniciales, se necesitaran {contar_bloques(num)} en total para completar la pir√°mide.")



'''
8- Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un 
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces 
aparece ese d√≠gito dentro del n√∫mero. 
      Ejemplos: 
contar_digito(12233421, 2)   ‚Üí 3   
contar_digito(5555, 5)       ‚Üí 4   
contar_digito(123456, 7)     ‚Üí 0  
'''

print("\nEjercicio 8\n")

def contar_digito(numero, digito):
    if numero == 0: # Condisi√≥n base
        return 0
    else:       # operador ternario................m√°s, el resultado de las recursiones
       return (1 if numero % 10 == digito else 0) + contar_digito(numero // 10, digito)

# Se solicitan los valores iniciales para la prueba
numero = int(input("Ingrese un n√∫mero entero positivo a analizar: "))
digito = int(input("Ingrese el d√≠gito a analizar: "))
# Se imprime el resultado
print(f"El d√≠gito {digito} se repite {contar_digito(numero, digito)} veces dentro del n√∫mero {numero} ")